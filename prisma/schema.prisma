generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                 @id @default(cuid())
  name                   String?
  email                  String?                @unique
  emailVerified          DateTime?
  image                  String?
  stripeCustomerId       String?
  isActive               Boolean                @default(false)
  accounts               Account[]
  sessions               Session[]
  tasks                  Task[]
  midtrans_subscriptions MidtransSubscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String  @id @default(cuid())
  idUser      String
  Title       String?
  category    String?
  description String?
  user        User    @relation(fields: [idUser], references: [id], onDelete: Cascade)
}

model MidtransSubscription {
  id                         String               @id @default(cuid())
  schedule_next_execution_at String
  status                     String
  payment_type               String
  trans                      MidransTransaction[]
  idUser                     String
  user                       User                 @relation(fields: [idUser], references: [id], onDelete: Cascade)
}

model MidransTransaction {
  subscription_id String
  orderId         String               @unique
  gross_amount    Int
  subscription    MidtransSubscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
}
